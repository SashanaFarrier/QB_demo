
@using MvcCodeFlowClientManual.Models
@model List<SalesOrder>

@{
    ViewBag.Title = "Home Page";

}

<div class="jumbotron">
    <h1>QuickBooks Sales Order</h1>
    <h2>Create your order</h2>
</div>

@*<p class="font-weight-bold text-uppercase mt-4">Start a new transaction</p>*@
<div class="row flex-column | transactionContainer">
    <div class="col">
        <div class="row justify-content-between">
            <form>
                <div class="col mb-3">
                    <label for="customerId" class="form-label">Customer ID</label>
                    <input type="text" class="form-control" id="customerId" placeholder="Customer ID display" readonly>
                </div>
            </form>

            <form>
                <div class="col mb-3">
                    <label for="date" class="form-label">Transaction Date</label>
                    <input type="date" class="form-control" id="date">
                </div>
            </form>
        </div>
        <form method="get" action="@Url.Action("GetCustomerJobs", "Customer")">
            <div id="customerJobsList" class="col mb-3 p-0">
                <label for="customerName" class="form-label d-block">Customer</label>

                <select id="customerName" class="form-select mb-3 customer-list" aria-label="customer jobs list">
                    <option selected value="Select">Select</option>
                </select>
            </div>
        </form>
    </div>
    <div class="col">
        <div class="transactions">
            <div class="row justify-content-between">
                <div class="col-10">
                    <form method="get" action="@Url.Action("GetItems", "Item")">
                        <button type="button" id="modal-btn" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">Add Item</button>
                    </form>
                </div>
                <div class="col">
                    <form method="post" action="@Url.Action("ClearOrders", "SalesOrder")">
                        <button class="btn btn-danger">Clear All</button>
                    </form>
                </div>
            </div>
            <!-- Modal -->

            @Html.Partial("_AddItemModal")

            <div id="salesOrderContainer">
                @if (Model != null && Model.Count > 0)
                {
                    <table class="table table-striped mt-5">
                        <thead>
                            <tr>
                                <th scope="col">No.</th>
                                <th scope="col">Item</th>
                                <th scope="col">Description</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Rate</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ int count = 0;}
                            @foreach (var order in Model)
                            {
                                count++;
                                <tr id="@order.OrderId">
                                    <th scope="row">@count.</th>
                                    <td>@order.ItemName</td>
                                    <td>@order.Description</td>
                                    <td>@order.Quantity</td>
                                    <td>@order.Amount</td>
                                    <td>@order.Rate</td>
                                    <td class="actions-col">
                                        <div class="action-btns">
                                            <a onclick="editSalesOrderItem('@order.OrderId')" class="edit-btn" data-id="@order.OrderId">
                                                <i class="fa-solid fa-pen-to-square"></i>
                                            </a>
                                            <a class="delete-btn" onclick="deleteSalesOrderItem('@order.OrderId')" data-id="@order.OrderId">
                                                <i class="fa-solid fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                }

                @if (Model != null && Model.Count > 0)
                {
                    <form>
                        <button class="btn btn-primary mt-3">Submit Order</button>
                    </form>
                }
            </div>
        </div>
    </div>
</div>
<script>
    const customerIdInput = document.getElementById("customerId");
    const customerNameInput = document.getElementById("customerName")
  
    async function getCustomerJobs(jobsListContainer) {
        try {
            const fetchUrl = fetch("/Customer/GetCustomerJobs");
            const response = await fetchUrl;
            const result = await response.json();

            if (result.length > 0) {
                //const customerJobs = result.map(customerJob => `<option>${customerJob.Name}</option>`);
                result.map(customerJob => {
                    if (customerJob.Locations.length > 0) {
                        const optgroupEl = document.createElement("optgroup")
                        optgroupEl.label = customerJob.Name
                        
                        let optionEl = document.createElement("option")
                        optionEl.text = customerJob.Name

                        optgroupEl.append(optionEl)

                        const locations = customerJob.Locations;
                        locations.map(location => {
                            optionEl = document.createElement("option")
                            optionEl.text = location
                            optgroupEl.append(optionEl)

                        });
                        jobsListContainer.querySelector(".customer-list").appendChild(optgroupEl)
                        
                    } else {
                        const optionEl = document.createElement("option")
                        optionEl.text = customerJob.Name
                        jobsListContainer.querySelector(".customer-list").appendChild(optionEl)
                        
                    }
                   
                });

                getCustomerId(result)
                //jobsListContainer.querySelector(".customer-list").innerHTML += customerJobs.join("")
            } else {
                jobsListContainer.innerHTML = `<p>There are no customer jobs. Add new customer jobs to your QuickBooks company file and then try again</p>`
            }
        }
        catch (error) {
            jobsListContainer.innerHTML = `<p>Error fecting customer jobs. Please try again.</p>`
            console.log("Error fetching customer jobs: ", error);
        }
        return jobsListContainer;
    }

    function getCustomerId(customerJobs) {
        customerNameInput.addEventListener("change", (e) => {
            if (e.target.value == "Select")
                customerIdInput.value = ""

            customerJobs.filter(customerJob => {
                if (customerJob.Name == e.target.value) {
                    customerIdInput.value = customerJob.CustomerListID
                }
            })

        })
    }

    async function getItems(itemsContainer) {
        try {
            const fetchUrl = fetch("/Item/GetItems");
            const response = await fetchUrl;
            const result = await response.json();

            if (result.length > 0) {
                const items = result.map(item => `<option>${item.Name}</option>`);
                itemsContainer.querySelector(".items-list").innerHTML += items.join("");

            } else {
                itemsContainer.innerHTML = `<p>There are no items. Reconnect to QuickBooks and then try again.</p>`
            }
        }
        catch (error) {
            itemsContainer.innerHTML = `<p>Error fecting items. Please try again.</p>`
            console.log("Error fetching items: ", error);
        }
        return itemsContainer;
    }

    async function editSalesOrderItem(orderId) {

        try {
            const response = await fetch(`/SalesOrder/GetItemOrderById/${orderId}`);

            if (!response.ok) {
                throw new Error(`Error fetching item: ${response.statusText}`);
            }

            const result = await response.json();
            //console.log(result)

            if (result != null) {
                const itemOrder = await result;
                updateModalContentHTML(itemOrder);
            }

            //return result;
        } catch (error) {
            console.error('Error fetching item:', error);

            alert('An error occurred while retrieving item details. Please try again later.');
        }
    }

    function updateModalContentHTML(itemOrder) {
        const modalContent = $("#staticBackdrop .modal-content");
        //const itemsContainer = document.getElementById("itemsContainer");
        //const options = getItems(itemsContainer)
        //console.log(getItems(options))
        modalContent.empty();
        const form = `
                    <form method="post" action="@Url.Action("UpdateOrder", "SalesOrder")">
              <div class="modal-header">
                  <input type="hidden" name="OrderId" value="${itemOrder.OrderId}"/>
                  <h5 class="modal-title" id="staticBackdropLabel">Edit order info</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
              </div>
              <div class="modal-body">
                  <div class="col mb-3">
                      <label for="item" class="form-label">Item</label>
                      <div id="itemsContainer">
                          <select class="form-select mb-3 items-list" aria-label="items list" name="ItemName">
                              <option selected>${itemOrder.ItemName}</option>
                          </select>
                      </div>
                  </div>
                  <div class="col mb-3">
                      <label for="desc" class="form-label">Description</label>
                      <input name="Description" type="text" class="form-control" id="desc" value=${itemOrder.Description} />
                  </div>
                  <div class="col mb-3">
                      <label for="qty" class="form-label">Quantity</label>
                      <input name="Quantity" type="text" class="form-control" id="qty" value=${itemOrder.Quantity} />
                  </div>
                  <div class="col mb-3">
                      <label for="amt" class="form-label">Amount</label>
                      <input name="Amount" type="text" class="form-control" id="amt" value=${itemOrder.Amount} />
                  </div>
                  <div class="col mb-3">
                      <label for="rate" class="form-label">Rate</label>
                      <input name="Rate" type="text" class="form-control" id="rate" value=${itemOrder.Rate} />
                  </div>
              </div>
              <div class="modal-footer">
                  <button type="submit" class="btn btn-primary">Update</button>
              </div>
          </form>
`;
        modalContent.append(form);
        $("#staticBackdrop").modal('show');
    }

    async function deleteSalesOrderItem(id) {
        try {
            const response = await fetch(`/SalesOrder/DeleteItem/${id}`, {
                method: "Post"
            })
            if (!response.ok) {
                throw new Error(`Error deleting item: ${response.statusText}`)
            }
            const result = await response.json();
            console.log(result)
            let el
            if (result) {
                el = document.getElementById(result.deleteItem)
                el.remove()
            }

        } catch (error) {
            console.error('Error during deletion:', error);
        }

    }

   function modalToggle() {
      $("#modal-btn").click(function () {
        $("#staticBackdrop").modal('show');
      });
   }

    $(document).ready(function () {
        const jobsListContainer = document.getElementById("customerJobsList");
        const itemsContainer = document.getElementById("itemsContainer");
        const salesOrderContainer = document.getElementById("salesOrderContainer");
        salesOrderContainer.classList.add("hidden")

        //modal to add new item
        modalToggle();
        getCustomerJobs(jobsListContainer);
        getItems(itemsContainer);

    });
</script>
